.RDD的缓存过程RDD在缓存到存储内存之前， Partition中的数据一般以迭代器（ Iterator）的数据结构来访问，这是 Scala语言中一种遍历数据集合的方法。通过 Iterator可以获取分区中每一条序列化或者非序列化的数据项（ Record），这些 Record的对象实例在逻辑上占用了JVM堆内内存的 other部分的空间，同一 Partition的不同 Record的存储空间并不连续。
RDD在缓存到存储内存之后， Partition被转换成 Block, Record在堆内或堆外存储内存中占用一块连续的空间。将 Partition由不连续的存储空间转换为连续存储空间的过程， Spark称之为展开"（ Unroll）r Block有序列化和非序列化两种存储格式，具体以哪种方式取决于该RDD的存储级别。非序列化的 Block以一种 DeserializedMemory Entry的数据结构定义，用一个数组存储所有的对象实例，序列化的 Block则以SerializedMemory Entry的数据结构定义，用字节缓冲区（ Byte Buffer）来存储二进制数据。每个 Executor的 Storage模块用一个链式Map结构（ LinkedHashMap）来管理堆内和堆外存储内存中所有的 Block对象的实例，对这个 LinkedHashMap新增和删除间接记录了内存的申请和释放。